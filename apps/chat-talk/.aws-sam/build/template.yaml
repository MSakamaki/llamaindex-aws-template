AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'chat-talk SAM for chat-talk

  '
Globals:
  Function:
    Timeout: 180
    MemorySize: 5120
Parameters:
  BucketName:
    Description: chroma db files
    Type: String
    Default: ${AWS::StackName}-store
Resources:
  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: ${AWS::StackName}-frontend
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: false
        IgnorePublicAcls: true
        RestrictPublicBuckets: false
  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: FrontendBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: PublicReadGetObject
          Effect: Allow
          Principal:
            AWS:
              Fn::Sub: arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity
                ${FrontendBucketCloudFrontOriginAccessIdentity}
          Action: s3:GetObject
          Resource:
            Fn::Sub: arn:aws:s3:::${FrontendBucket}/*
  FrontendBucketCloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment:
          Fn::Sub: Access Identity for ${AWS::StackName}
  VectorStoreS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Ref: BucketName
  RagTalkApi:
    Type: AWS::Serverless::Api
    Properties:
      Name:
        Fn::Sub: ${AWS::StackName}-api
      StageName: Prod
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn:
              Fn::GetAtt:
              - RagTalkCognitoUserPool
              - Arn
  ChatTalkFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AWS::StackName}-lambda
      PackageType: Image
      Policies:
      - S3ReadPolicy:
          BucketName:
            Ref: BucketName
      Architectures:
      - x86_64
      Events:
        ChatTalk:
          Type: Api
          Properties:
            RestApiId:
              Ref: RagTalkApi
            Path: /chat_talk
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer
      Environment:
        Variables:
          BUCKET_NAME:
            Ref: BucketName
          OPENAI_API_KEY: '{{resolve:secretsmanager:gpt-talk:SecretString:OPENAI_API_KEY}}'
      ImageUri: chattalkfunction:python3.11
    Metadata:
      DockerContext: /Users/m.sakamaki/project/gxp/llm-chat-template/apps/chat-talk/chat_talk
      DockerTag: python3.11
      Dockerfile: .Dockerfile
      SamResourceId: ChatTalkFunction
  RagTalkCognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName:
        Fn::Sub: ${AWS::StackName}-userpool
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
  RagTalkCognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName:
        Fn::Sub: ${AWS::StackName}-userpool-client
      UserPoolId:
        Ref: RagTalkCognitoUserPool
      GenerateSecret: false
      ExplicitAuthFlows:
      - ALLOW_ADMIN_USER_PASSWORD_AUTH
      - ALLOW_USER_PASSWORD_AUTH
      - ALLOW_REFRESH_TOKEN_AUTH
      - ALLOW_USER_SRP_AUTH
  RagTalkFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
        - Id: S3Origin
          DomainName:
            Fn::GetAtt:
            - FrontendBucket
            - DomainName
          S3OriginConfig:
            OriginAccessIdentity:
              Fn::Sub: origin-access-identity/cloudfront/${FrontendBucketCloudFrontOriginAccessIdentity}
        - Id: ApiGatewayOrigin
          DomainName:
            Fn::Sub: ${RagTalkApi}.execute-api.${AWS::Region}.amazonaws.com
          OriginPath: /Prod
          CustomOriginConfig:
            HTTPPort: 80
            HTTPSPort: 443
            OriginProtocolPolicy: https-only
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
          - HEAD
          - DELETE
          - POST
          - GET
          - OPTIONS
          - PUT
          - PATCH
          CachedMethods:
          - GET
          - HEAD
          ForwardedValues:
            QueryString: 'false'
            Cookies:
              Forward: none
        CacheBehaviors:
        - PathPattern: /chat_talk*
          TargetOriginId: ApiGatewayOrigin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
          - HEAD
          - DELETE
          - POST
          - GET
          - OPTIONS
          - PUT
          - PATCH
          CachedMethods:
          - GET
          - HEAD
          ForwardedValues:
            QueryString: 'false'
            Cookies:
              Forward: none
        Enabled: 'true'
        DefaultRootObject: index.html
Outputs:
  WebsiteURL:
    Value:
      Fn::Sub: http://${FrontendBucket}.s3-website-${AWS::Region}.amazonaws.com
    Description: URL for S3 bucket hosting the website
  ChatTalkFunction:
    Description: Gpt talk Lambda Function ARN
    Value:
      Fn::GetAtt:
      - ChatTalkFunction
      - Arn
  CloudFrontURL:
    Value:
      Fn::GetAtt:
      - RagTalkFrontDistribution
      - DomainName
    Description: URL for CloudFront distribution
  ChatTalkFunctionIamRole:
    Description: Implicit IAM Role created for Gpt talk function
    Value:
      Fn::GetAtt:
      - ChatTalkFunctionRole
      - Arn
  ApiEndpoint:
    Value:
      Fn::Sub: https://${RagTalkApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/chat_talk
    Description: Endpoint for the API Gateway
